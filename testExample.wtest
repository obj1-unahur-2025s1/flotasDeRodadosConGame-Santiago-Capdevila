import rodados.*
import dependecias.*

describe "Test con dos dependencias" {
  const deportes = new Dependencia(empleados = 45)
  const cultura = new Dependencia(empleados = 31)
  const cachito = new Corsa(color = "rojo")

  method initialize() {
    deportes.agregarAFlota(cachito)
    deportes.agregarAFlota(new Corsa(color = "azul"))
    deportes.agregarAFlota(new Corsa(color = "verde"))
    deportes.agregarAFlota(new Kwid(tieneTanqueAdicional = true))
    deportes.agregarAFlota(new Especial(capacidad = 5, velocidad = 160, peso = 1200, color = "beige"))
    cultura.agregarAFlota(cachito)
    cultura.agregarAFlota(new Kwid(tieneTanqueAdicional = true))
    cultura.agregarAFlota(new Kwid(tieneTanqueAdicional = true))
    cultura.agregarAFlota(new Kwid(tieneTanqueAdicional = false))
    trafic.interior(popular)
    trafic.motor(bataton)
    cultura.agregarAFlota(trafic)
  }

  test "Deportes tiene peso total de 6450" {
    assert.equals(1300 + 1300 + 1300 + 1350 + 1200, deportes.pesoTotalFlota())
  }
  test "Cultura tiene peso total de 10700" {
    assert.equals(1300 + (1350 * 2) + 1200 + (4000 + 1000 + 500), cultura.pesoTotalFlota())
  }
  test "Deportes esta bien equipada" {
    assert.that(deportes.estaBienEquipada())
  }
  test "Cultura no esta bien equipada" {
    assert.notThat(cultura.estaBienEquipada())
  }
  test "La capacidad en color azul de deportes es 7" {
    assert.equals(7, deportes.capacidadTotalEnColor("azul"))
  }
  test "La capacidad en color azul de cultura es 10" {
    assert.equals(10, cultura.capacidadTotalEnColor("azul"))
  }
}